spring.datasource.url=jdbc:mysql://34.73.4.221:3306/chatbot_db?serverTimezone=UTC
spring.datasource.username=root
spring.datasource.password=${TESIS_DB_PASSW}

spring.jpa.database=mysql
spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql=true

spring.datasource.tomcat.max-wait = 20000
spring.datasource.tomcat.max-active = 50
spring.datasource.tomcat.max-idle = 20
spring.datasource.tomcat.min-idle = 15

# base url
server.servlet.context-path=/proyeccion-social/api

#Bucket GCP
component.projectId.value=chatbot-proyeccion-social-uefy

#spring.cloud.gcp.credentials.location=classpath:/gcp-credentials.json
component.bucketName.certificados.value=certificados-documentos

component.bucketName.documentos.value=documentos-requeridos

# If your app is running on Google App Engine or Google Compute Engine, in most cases, you should omit the
# spring.cloud.gcp.credentials.location property and, instead, let the Spring Cloud GCP Starter get the correct credentials for those environments
# source -> https://cloud.spring.io/spring-cloud-gcp/multi/multi_spring-cloud-gcp-core.html#_credentials
# spring.cloud.gcp.credentials.location=gs://${GCP_CREDENTIALS_FILE}

# With the credentials obtained by Spring Cloud GCP Starter, other services can also be accessed. Scopes must be indicated for that purpose
spring.cloud.gcp.credentials.scopes=https://www.googleapis.com/auth/devstorage.read_write